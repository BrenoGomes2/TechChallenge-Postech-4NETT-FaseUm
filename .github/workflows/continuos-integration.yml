name: CI / CD Pipeline

on:
  push:
    branches:
      - master
      - feature/**
  pull_request:
    branches:
      - master
      - develop
      - release
      
jobs:
  build:
    name: Executando o job de build do projeto
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x

      - name: Install dependencies
        run: dotnet restore
        working-directory: src

      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: src

  unit-tests:
    name: Executando o job de testes unitário
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x

      - name: Install dependencies
        run: dotnet restore
        working-directory: tests/Postech.PhaseOne.GroupEight.TechChallenge.UnitTests

      - name: Build
        run: dotnet build --configuration Release --no-restore 
        working-directory: tests/Postech.PhaseOne.GroupEight.TechChallenge.UnitTests

      - name: Run unit tests
        run: dotnet test --configuration Release --no-restore --verbosity normal 
        working-directory: tests/Postech.PhaseOne.GroupEight.TechChallenge.UnitTests
  
  integration-tests:
    name: Executando o job de testes de integração
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x

      - name: Install dependencies
        run: dotnet restore
        working-directory: tests/Postech.PhaseOne.GroupEight.TechChallenge.IntegrationTests

      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: tests/Postech.PhaseOne.GroupEight.TechChallenge.IntegrationTests

      - name: Run integration tests
        run: dotnet test --configuration Release --no-restore --verbosity normal
        working-directory: tests/Postech.PhaseOne.GroupEight.TechChallenge.IntegrationTests
  
  functional-tests:
    name: Executando o job de testes funcionais
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x

      - name: Install dependencies
        run: dotnet restore
        working-directory: tests/Postech.PhaseOne.GroupEight.TechChallenge.FunctionalTests

      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: tests/Postech.PhaseOne.GroupEight.TechChallenge.FunctionalTests

      - name: Run functional tests
        run: dotnet test --configuration Release --no-restore --verbosity normal
        working-directory: tests/Postech.PhaseOne.GroupEight.TechChallenge.FunctionalTests

  build-sonarqube:
    name: sonarqube
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        shell: pwsh
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"TechChallenge-Fiap" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
